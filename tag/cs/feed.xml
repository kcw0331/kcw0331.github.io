<?xml version="1.0" encoding="utf-8"?>

<feed xmlns="http://www.w3.org/2005/Atom" >
  <generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator>
  <link href="http://localhost:4000/tag/cs/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" />
  <updated>2023-05-03T19:43:04+09:00</updated>
  <id>http://localhost:4000/tag/cs/feed.xml</id>

  
  
  

  
    <title type="html">꿈을 향해 나아가자! | </title>
  

  
    <subtitle>창우의 아이티블로그</subtitle>
  

  

  
    
      
    
  

  
  

  
    <entry>
      <title type="html">cs - DATABASE - Difference Sharding and Partitioning</title>
      <link href="http://localhost:4000/tag/cs-5" rel="alternate" type="text/html" title="cs - DATABASE - Difference Sharding and Partitioning" />
      <published>2023-05-03T09:40:00+09:00</published>
      <updated>2023-05-03T09:40:00+09:00</updated>
      <id>http://localhost:4000/tag/cs-5</id>
      <content type="html" xml:base="http://localhost:4000/tag/cs-5">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;CS 스터디 공부 목록 &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./cs-1&quot;&gt;CS - Hyper-parameter&lt;/a&gt;&lt;/li&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./coding-thiscoding(20230117)&quot;&gt;Coding - 순차 탐색&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./coding-thiscoding(20230118)&quot;&gt;Coding - 이진 탐색&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./msai-1weeks(2)&quot;&gt;Msai - 1주차(2)&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./msai-1weeks(3)&quot;&gt;Msai - 1주차(3)&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;database-sharding-vs-partitioning-whats-the-difference&quot;&gt;Database Sharding vs. Partitioning: What’s the Difference?&lt;/h1&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction:&lt;/h2&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Grewing size of the service, vary and many Tables eixisted.&lt;/li&gt;
  &lt;li&gt;VLDB (Very Large DBMS) DBMSs that make it difficult to fit the entire DB into one DBMS have naturally emerged, and as one DBMS manages many tables, a slowdown issue occurs.&lt;/li&gt;
  &lt;li&gt;One way to address these issues is through partitioning.&lt;/li&gt;
  &lt;li&gt;Sharding and Partitioning are both related to breaking up a large data set into smaller subsets.&lt;/li&gt;
  &lt;li&gt;The difference is that sharding implies the data is spread across multiple computers while partitioning does not.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-what-is-partitioning&quot;&gt;1. What is Partitioning?&lt;/h2&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Partitioning is the database process where very large tables are divied into multiple smaller parts.&lt;/li&gt;
  &lt;li&gt;it’s more a generic term for dividing data across tables or databases.&lt;/li&gt;
  &lt;li&gt;The main goal of partitioning is to aid in maintenance of large tables and to reduce the overall response time to read and load data for particular SQL operations.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;11vertical-partitioning&quot;&gt;1.1.Vertical Partitioning&lt;/h2&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Vertical table partitioning is mostly used to increase SQL Server performance especially in cases where a query retrieves all columns from a table that contains a number of very wide text or BLOB columns.&lt;/li&gt;
  &lt;li&gt;In this case to reduce access times the BLOB columns can be split to its own table.&lt;/li&gt;
  &lt;li&gt;Another example is to restrict access to sensitive data (exaple, passwords, salary information etc.)&lt;/li&gt;
  &lt;li&gt;Vertical partitioning splits a table into two or more tables containing different columns.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;12-advantage&quot;&gt;1.2. Advantage&lt;/h2&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;h3 id=&quot;121-availability&quot;&gt;1.2.1. Availability&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Physical partitioning reduces the likelihood of overall data corruption and improves data availability.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;122-manageability&quot;&gt;1.2.2. Manageability&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Eliminates large tables for easier management.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;123-performance&quot;&gt;1.2.3. Performance&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Improves the performance of certain DMLs and queries, primarily in large data write environments.&lt;/li&gt;
  &lt;li&gt;Reduces contention in OLTP systems with many inserts by distributing insert operations to separate partitions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;13-disadvantages&quot;&gt;1.3. Disadvantages&lt;/h2&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Increases the cost of joins between tables.&lt;/li&gt;
  &lt;li&gt;We cannot partition tables and indexes separately. Tables and indexes must be partitioned together.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2--what-is-shardinghorizontal-partitioning&quot;&gt;2.  What is Sharding(Horizontal Partitioning)?&lt;/h2&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A type of horizontal partitioning that splits large database into smaller components, which are faster and easier to manage.&lt;/li&gt;
  &lt;li&gt;In other words, Splitting up a large table of data horizontally i.e. row-wise.&lt;/li&gt;
  &lt;li&gt;As both the database size and number of transactions increase, so does the response time of querying the database.&lt;/li&gt;
  &lt;li&gt;Costs associated with maintaining a huge database can also skyrocket due to the number and quality of computers you need to manage your workload.&lt;/li&gt;
  &lt;li&gt;Data shards, on the other hand, have fewer hardware and software requirements and can be managed on less expensive servers.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;21-advantages-of-sharding&quot;&gt;2.1. Advantages of Sharding&lt;/h2&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;h3 id=&quot;211-solve-scalability-issue&quot;&gt;2.1.1. Solve Scalability Issue:&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;With a single database server architecture any application experiences performance degradation.&lt;/li&gt;
  &lt;li&gt;At some point, we will be running out of disk space.&lt;/li&gt;
  &lt;li&gt;Database sharding fixes all these issues by partitioning the data across multiple machines.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;212-high-availability&quot;&gt;2.1.2. High Availability:&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If an outage happens in sharded  architecture, then only some specific shards will be down.&lt;/li&gt;
  &lt;li&gt;All the ohther shards will continue the operation and the entire application won’t be unavailable for the users.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;213-speed-up-query-response-time&quot;&gt;2.1.3. Speed Up Query Response Time:&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In a sharded database a query has to go through fewer rows, and we receive the response in less time.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;214-more-write-bandwidth&quot;&gt;2.1.4. More Write Bandwidth:&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;For many applications writings is a major bottleneck.&lt;/li&gt;
  &lt;li&gt;With no master database serializing writes sharded archietecure allows we to write in parallel and increase our write throughtput.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;215-scaling-out&quot;&gt;2.1.5. Scaling Out:&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sharding a database facilitates horizontal scaling, known as scaling out.&lt;/li&gt;
  &lt;li&gt;In horizontal scaling, we add more machines in the network and distribute the load and these machines for faster processing and response.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;22-disadvantages-of-sharding&quot;&gt;2.2. Disadvantages of Sharding&lt;/h2&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;h3 id=&quot;221-adds-comlexity-in-the-system&quot;&gt;2.2.1 Adds Comlexity in the System:&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s a complicated task and if it’s not implemented properly then we may lose the data or get corrupt tables in our database.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;222-reblancing-data&quot;&gt;2.2.2. Reblancing Data:&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In a sharded database architecure, somtimes shards become unbalanced and may create database hotspot.&lt;/li&gt;
  &lt;li&gt;To overcome this problem and to rebalance the data we need to do re-sharding for even data distribution.&lt;/li&gt;
  &lt;li&gt;Moving data from one shard to another shard is not a good idea beacause it requires a lot of downtime.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;223-joining-data-from-multiple-shards-is-expensive&quot;&gt;2.2.3. Joining Data from Multiple Shards is Expensive:&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In sharded architecture, we need to pull the data from different shards, and we need to perform joins across multiple networked servers.&lt;/li&gt;
  &lt;li&gt;We can pull out the data and join the data across the network.&lt;/li&gt;
  &lt;li&gt;This is going to be an expensive and time-consuming process.&lt;/li&gt;
  &lt;li&gt;It adds latency to our system.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;224-no-native-support&quot;&gt;2.2.4. No Native Support:&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sharding is not natively supported by every database engine.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;reference-links&quot;&gt;Reference Links:&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.singlestore.com/blog/database-sharding-vs-partitioning-whats-the-difference/&quot;&gt;reference 1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://medium.com/@nishantparmar/distribute-data-replication-partitioning-and-sharding-920a71481c1c&quot;&gt;reference 2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.macrometa.com/distributed-data/sharding-vs-partitioning&quot;&gt;reference 3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://nesoy.github.io/articles/2018-02/Database-Partitioning&quot;&gt;reference 4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>kcw0331</name>
        
        
      </author>

      

      
        <category term="cs" />
      

      
        <summary type="html">CS 스터디 공부 목록 CS - Hyper-parameter</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">cs - Database RDBMS And NoSQL</title>
      <link href="http://localhost:4000/tag/cs-4" rel="alternate" type="text/html" title="cs - Database RDBMS And NoSQL" />
      <published>2023-04-21T09:40:00+09:00</published>
      <updated>2023-04-21T09:40:00+09:00</updated>
      <id>http://localhost:4000/tag/cs-4</id>
      <content type="html" xml:base="http://localhost:4000/tag/cs-4">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;CS 스터디 공부 목록 &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./cs-1&quot;&gt;CS - Hyper-parameter&lt;/a&gt;&lt;/li&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./coding-thiscoding(20230117)&quot;&gt;Coding - 순차 탐색&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./coding-thiscoding(20230118)&quot;&gt;Coding - 이진 탐색&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./msai-1weeks(2)&quot;&gt;Msai - 1주차(2)&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./msai-1weeks(3)&quot;&gt;Msai - 1주차(3)&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;rdbms와-nosql의-특징에-대해서-설명해-보세요&quot;&gt;RDBMS와 NOSQL의 특징에 대해서 설명해 보세요.&lt;/h1&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Databse&lt;/strong&gt;란 일반적으로 컴퓨터 시스템에 전자 방식으로 저장된 구조화된 정보 또는 데이터의 체계적인 집합이다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DBMS&lt;/strong&gt;란(DataBase Management System) 사용자와 데이터베이스 사이에서 사용자의 요구에 따라 정보를 생성해 주고 데이터베이스를 관리해 주는 소프트웨어이다.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;SQL&lt;/strong&gt;이란(Strucured Query Language) 관계형 데이터베이스 관리 시스템의 데이터를 관리하기 위해 설계된 특수 목적의 프로그래밍 언어이다. 
관계형 데이터베이스 관리 시스템에서 자료의 검색과 관리, 데이터베이스 스키마 생성과 수정, 데이터베이스 객체 접근 조정 관리를 위해 사용된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-rdbms&quot;&gt;1. RDBMS&lt;/h2&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RDBMS에서 R은(Relational)의 약자로 RDBMS는 관계형 데이터베이스 관리 시스템을 의미한다.&lt;/li&gt;
  &lt;li&gt;RDBMS는 RDB를 관리하는 시스템이며 RDB는 관계형 데이터 모델을 기초로 두고 모든 데이터를 2차원 테이블 형태로 표현하는 데이터베이스이다.&lt;/li&gt;
  &lt;li&gt;관계형 데이터베이스(RDMBS)는 아래와 같이 구성된 테이블이 다른 테이블들과 관계를 맺고 모여있는 집합체로 이해할 수 있습니다.&lt;/li&gt;
  &lt;li&gt;또한 이러한 것을 나타내기 위해 primary key와 foreign key를 사용한다.&lt;/li&gt;
  &lt;li&gt;이러한 테이블간의 관계에서 primary key와 foreign key를 이용하여 테이블 간 JOIN을 사용하여 결과를 추출해낸다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[회원 테이블]&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;회원 번호(Primay key)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;회원 이름&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;휴대폰 번호&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;111&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;홍길동&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;11111111111&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;222&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;김철수&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;22222222222&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;333&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;아무개&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;33333333333&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;[주문 테이블]&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;주문 번호(Primay key)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;회원 번호(Foreign key)&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;주문 상품&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;202303220001&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;111&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;아이폰&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;202303230002&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;222&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;맥북&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;202303240003&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;333&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;아이패드&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h2 id=&quot;2-nosql&quot;&gt;2. NoSQL&lt;/h2&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NoSQL은 RDBMS와 다르게 테이블 간에 관계를 정의하지 않는다.&lt;/li&gt;
  &lt;li&gt;데이터의 테이블은 하나의 테이블이고 테이블 간의 관계를 정의하지 않아서 테이블 간의 JOIN이 불가능하다.&lt;/li&gt;
  &lt;li&gt;NoSQL은 빅데이터의 등장으로 인해 데이터와 트래픽이 기하급수적으로 증가함에 따라 데이터의 일관성은 포기하고 비용을 고려하여 여러 대의 데이터에 분산하여 저장하는 &lt;strong&gt;Scale-Out&lt;/strong&gt;을 등장시키게 되었다.
&lt;strong&gt;NoSQL을 사용하는 이유는&lt;/strong&gt; RDBMS의 단점인 성능을 향상시키기 위해 사용하는 Scale-Up이 비용을 기하급수적으로 증가시키기 때문이다.&lt;/li&gt;
  &lt;li&gt;NoSQL은 Document기반인 MongoDB를 많이들 기억하고 있을 것이다. 하지만 MongoDB도 NoSQL의 한 종류중 하나이기 때문에 NoSQL은 아래와 같은 다양한 형태의 저장 기술을 가지고 있다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;21-key-value-database&quot;&gt;2.1. Key-Value Database&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Key-Value Database는 데이터가 Key와 Value의 쌍으로 저장된다.&lt;/li&gt;
  &lt;li&gt;NoSQL Key-Value Model: Redis, Riak, Amazon DynamoDB etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;22-document-database&quot;&gt;2.2. Document Database&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Document Database 데이터는 Key와 Document의 형태로 저장된다.&lt;/li&gt;
  &lt;li&gt;Key-Value 모델과 다른 점은 Value가 계측적인 형태인 도큐먼트로 저장된다. 객체지향에서의 객체와 유사하며, 이것들이 하나의 단위로 저장된다.&lt;/li&gt;
  &lt;li&gt;즉, 하나의 객체를 여러 개의 테이블에 나뉘어 저장할 필요가 없다.&lt;/li&gt;
  &lt;li&gt;단점: 사용이 번거롭고 퀴리가 SQL문과는 다르다. 도큐먼트 모델에서는 질의의 결과가 JSON이나 XML형태로 출력되기 때문에 그 사용 방법이 RDBMS에서의 질의 결과와는 다르다.&lt;/li&gt;
  &lt;li&gt;NoSQL Document Model: MongoDB, Apache CouchDB etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;23-wide-column-database&quot;&gt;2.3. Wide Column Database&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Column-family Model 기반의 Database이며 이전의 모델들이 Key-Value 값을 이용해 필드를 결정했다면, 특이하게도 이 모델은 키에서 필드를 결정한다.&lt;/li&gt;
  &lt;li&gt;키는 Row(키 값)와 Column-family, Column-name을 가진다. 연관된 데이터들은 같은 Column-family 안에 속해 있으며, 각자의 Column-name을 가진다. 관계형 모델로 설명하자면 어트리뷰트가 계층적인 구조를 가지고 있다.&lt;/li&gt;
  &lt;li&gt;이렇게 저장된 데이터는 하나의 커다란 테이블로 표현이 가능하며, 질의는 Row, Column-family, Column-name을 통해 수행된다.&lt;/li&gt;
  &lt;li&gt;NoSQL Column-family Model: Apache HBase, Hypertable etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;24-graph-database&quot;&gt;2.4. Graph Database&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Graph Model Model에서는 데이터를 Node와 Edge, Property와 함께 그래프 구조를 사용하여 데이터를 표현하고 저장하는 Database이다.&lt;/li&gt;
  &lt;li&gt;개체와 관계를 그래프 형태로 표현한 것이므로 관계형 모델이라고 할 수 있으며, 데이터 간의 관계가 탐색의 키일 경우에 적합하다.&lt;/li&gt;
  &lt;li&gt;페이스북이나 트위터 같은 소셜 네트워크에서 적합하며, 연관된 데이터를 추천해주는 추천 엔진이나 패턴 인식 등의 데이터베이스로도 적합하다.&lt;/li&gt;
  &lt;li&gt;NoSQL Graph Model: Neo4j.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-rdbms와-nosql의-장점과-단점&quot;&gt;3. RDBMS와 NoSQL의 장점과 단점&lt;/h2&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;h3 id=&quot;31-rdbms&quot;&gt;3.1. RDBMS&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;RDBMS는 정해진 스키마에 따라 데이터를 저장하며 따라서 명확한 데이터 구조를 보장한다.&lt;/li&gt;
      &lt;li&gt;각 데이터를 중복없이 한 번만 저장 할 수 있다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;테이블 간 관계를 맺고 있어 시스템이 커질 경우, JOIN이 많아지면서 복잡한 퀴리가 만들어진다.&lt;/li&gt;
      &lt;li&gt;성능 향상을 위해서 서버의 성능을 향상 시켜야 하는데, 이때 Scale-Up만 가능하다. 이에 따라 비용이 기하급수적으로 증가하게 된다.&lt;/li&gt;
      &lt;li&gt;스키마로 인해 데이터가 유연하지 못하다. 나중에 스키마 변경이 어렵다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;32-nosql&quot;&gt;3.2. NoSQL&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;장점
    &lt;ul&gt;
      &lt;li&gt;NoSQL은 스키마가 없기 때문에 유연하며 자유로운 데이터 구조를 가진다. 따라서 언제든 저장된 데이터를 조정하고 새로운 필드를 추가 가능하다.&lt;/li&gt;
      &lt;li&gt;데이터 분산이 용이하기 때문에 성능 향상을 위한 Scale-Up, Scale-Out이 가능하다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;단점
    &lt;ul&gt;
      &lt;li&gt;데이터 중복이 발생할 수 있으며, 중복된 데이터가 변경 될 경우 모든 컬렉션을 수정해야한다.&lt;/li&gt;
      &lt;li&gt;스키마가 존재하지 않기 때문에 명확한 데이터 구조를 보장하지 않으며 데이터 구조 결정이 어렵다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;참고자료&quot;&gt;참고자료&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://khj93.tistory.com/entry/Database-RDBMS%EC%99%80-NOSQL-%EC%B0%A8%EC%9D%B4%EC%A0%90&quot;&gt;참고자료1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://bruno-jang.tistory.com/34&quot;&gt;Scale-Up and Scale_Out 참고자료&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>kcw0331</name>
        
        
      </author>

      

      
        <category term="cs" />
      

      
        <summary type="html">CS 스터디 공부 목록 CS - Hyper-parameter</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">cs - Database Normalization</title>
      <link href="http://localhost:4000/tag/cs-3" rel="alternate" type="text/html" title="cs - Database Normalization" />
      <published>2023-04-17T09:40:00+09:00</published>
      <updated>2023-04-17T09:40:00+09:00</updated>
      <id>http://localhost:4000/tag/cs-3</id>
      <content type="html" xml:base="http://localhost:4000/tag/cs-3">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;CS 스터디 공부 목록 &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./cs-1&quot;&gt;CS - Hyper-parameter&lt;/a&gt;&lt;/li&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./coding-thiscoding(20230117)&quot;&gt;Coding - 순차 탐색&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./coding-thiscoding(20230118)&quot;&gt;Coding - 이진 탐색&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./msai-1weeks(2)&quot;&gt;Msai - 1주차(2)&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./msai-1weeks(3)&quot;&gt;Msai - 1주차(3)&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;database---normalization&quot;&gt;Database - Normalization&lt;/h1&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;h2 id=&quot;데이터베이스-정규화에-대해서-설명해-보세요&quot;&gt;데이터베이스 정규화에 대해서 설명해 보세요.&lt;/h2&gt;
&lt;p&gt;
&lt;/p&gt;

&lt;h3 id=&quot;정규화-란&quot;&gt;정규화 란&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;데이터베이스 정규화(Database Normalization)는 관계형 데이터베이스에서 중복 데이터를 최소화하고 데이터 구조를 효율적으로 설계하기 위한 과정입니다.&lt;/li&gt;
  &lt;li&gt;정규화를 통해 데이터베이스의 무결성, 일관성 및 유지 관리가 용이해집니다.&lt;/li&gt;
  &lt;li&gt;정규화는 여러 단계로 나뉘며, 이를 정규 형태(Normal Forms)라고 부릅니다.&lt;/li&gt;
  &lt;li&gt;주요 정규 형태로는 제1정규형(1NF), 제2정규형(2NF), 제3정규형(3NF), BCNF(Boyce-Codd Normal Form) 등이 있습니다.&lt;/li&gt;
  &lt;li&gt;가장 많이 쓰이는 형태는 제1정규형과 제2정규형, 제3정규형, BCNF까지라고 볼 수 있습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;정규화의-장점&quot;&gt;정규화의 장점&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;데이터베이스 변경 시 이상 현상(Anomaly)를 제거할 수 있다.&lt;/li&gt;
  &lt;li&gt;정규화된 데이터베이스 구조에서는 새로운 데이터 형의 추가로 인한 확장 시, 그 구조를 변경하지 않거나 일부만 변경하여 사용한다.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;정규화의-단점&quot;&gt;정규화의 단점&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;데이터베이스 정규화는 데이터의 중복 속성을 제거하고 결정자에 의해 동일한 의미의 일반 속성이 하나의 테이블로 집약되므로 한 테이블의 데이터 용량이 최소화되는 효과가 있습니다.&lt;/li&gt;
  &lt;li&gt;그러나 릴레이션의 분해로 인해 릴레이션 간의 JOIN연산이 많아져서 &lt;strong&gt;질의에 대한 응답 시간이 느려질&lt;/strong&gt; 수도 있습니다.&lt;/li&gt;
  &lt;li&gt;만약 조인이 많이 발생하여 성능 저하가 나타나면 &lt;strong&gt;반정규화(De-normalization)&lt;/strong&gt;를 적용할 수도 있습니다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;참고자료(정규화의 단점)
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://ggggraceful.github.io/posts/Normalization/&quot;&gt;정규화의 단점1&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://sodayeong.tistory.com/106&quot;&gt;정규화의 단점2&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://datalibrary.tistory.com/256&quot;&gt;정규화의 단점3&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://code-lab1.tistory.com/48&quot;&gt;정규화의 단점4&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;1-제1정규형1nf&quot;&gt;1. 제1정규형(1NF)&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;제1정규형은 테이블의 모든 컬럼이 원자 값(Atomic Value)을 가져야 하며, 중복되는 값이 없도록 하는 것입니다.&lt;/li&gt;
  &lt;li&gt;이를 통해 테이블의 각 행이 고유한 키(Primary Key)를 갖게 되어 데이터 중복을 줄입니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;규칙&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;각 컬럼이 하나의 속성만을 가져야 한다.&lt;/li&gt;
    &lt;li&gt;하나의 컬럼은 같은 종류나 타입(type)의 값을 가져야 한다.&lt;/li&gt;
    &lt;li&gt;각 컬럼이 유일한(unique) 이름을 가져야 한다.&lt;/li&gt;
    &lt;li&gt;컬럼의 순서가 상관이 없어야 한다.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;1NF가 필요한 테이블&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;학생번호&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;이름&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;과목&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;101&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;아이유&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;운영체제,DB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;102&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;한지민&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;자바&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;103&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;임수정&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C, C++&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;규칙&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;만족/불만족&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;각 컬럼이 하나의 속성만을 가져야 한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;불만족&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;하나의 컬럼은 같은 종류나 타입(type)의 값을 가져야 한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;만족&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;각 컬럼이 유일한(unique) 이름을 가져야 한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;만족&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;컬럼의 순서가 상관이 없어야 한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;만족&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;1NF를 적용한 테이블&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;학생번호&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;이름&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;과목&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;101&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;아이유&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;운영체제&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;101&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;아이유&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;102&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;한지민&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;자바&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;103&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;임수정&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;103&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;임수정&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C++&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;규칙&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;만족/불만족&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;각 컬럼이 하나의 속성만을 가져야 한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;만족&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;하나의 컬럼은 같은 종류나 타입(type)의 값을 가져야 한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;만족&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;각 컬럼이 유일한(unique) 이름을 가져야 한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;만족&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;컬럼의 순서가 상관이 없어야 한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;만족&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;2-제2정규형2nf&quot;&gt;2. 제2정규형(2NF)&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;제2정규형은 제1정규형을 만족한 상태에서 부분적 함수 종속(Partial Functional Dependency)을 제거하는 것입니다.&lt;/li&gt;
  &lt;li&gt;부분적 함수 종속은 기본 키가 복합키인 경우, 일부 속성이 기본 키의 일부 속성에만 종속되어 있는 상황을 말합니다.&lt;/li&gt;
  &lt;li&gt;이를 해결하기 위해 테이블을 분리하여 중복을 제거하고 무결성을 유지합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;규칙&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;1정규형을 만족해야 한다.&lt;/li&gt;
    &lt;li&gt;모든 컬럼이 부분적 종속이 없어야 한다.(즉, 모든 컬럼이 완전 함수 종속을 만족해야 한다.)&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;2NF이 필요한 테이블&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;학생번호&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;과목&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;지도교수&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;성적&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;101&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;운영체제&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;김운체&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;100&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;101&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DB&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;조디비&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;60&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;102&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;자바&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;박자바&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;70&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;103&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;김씨&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;80&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;103&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C++&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;이씨플&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;90&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;규칙&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;만족/불만족&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1정규형을 만족해야 한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;만족&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;모든 컬럼이 부분적 종속이 없어야 한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;불만족&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;2NF을 적용한 테이블&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;성적테이블 &amp;amp; 과목테이블&amp;gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;학생번호&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;과목&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;성적&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;—&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;과목&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;지도교수&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;101&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;운영체제&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;100&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;—&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;운영체제&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;김운체&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;101&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DB&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;60&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;—&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;DB&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;조디비&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;102&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;자바&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;70&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;—&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;자바&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;박자바&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;103&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;80&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;—&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;김씨&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;103&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C++&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;90&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;—&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;c++&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;이씨플&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;규칙&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;만족/불만족&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;1정규형을 만족해야 한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;만족&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;모든 컬럼이 부분적 종속이 없어야 한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;만족&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;2NF 적용 효과&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;2정규화를 진행하면 이와 같이 테이블을 둘로 나눌 수 있게 됩니다.&lt;/li&gt;
    &lt;li&gt;성적테이블과 과목테이블로 나누어서 데이터를 관리하게 되면 변경사항이 발생했을 때에 해당 테이블의 데이터만 수정하는 것이 가능해집니다.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;3-제3정규형3nf&quot;&gt;3. 제3정규형(3NF)&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;제3정규형은 제2정규형을 만족한 상태에서 이행적 함수 종속(Transitive Functional Dependency)을 제거하는 것입니다.&lt;/li&gt;
  &lt;li&gt;이행적 함수 종속은 한 속성이 다른 속성에 간접적으로 종속되어 있는 상황을 말합니다.&lt;/li&gt;
  &lt;li&gt;이를 해결하기 위해 간접적으로 종속된 속성을 독립된 테이블로 분리하여 중복을 제거하고 무결성을 유지합니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;규칙&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;2정규형을 만족해야 한다.&lt;/li&gt;
    &lt;li&gt;기본키를 제외한 속성들 간의 이행 종속성이 없어야 한다.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;3NF이 필요한 테이블&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;ID&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;등급&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;할인율&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;101&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Vip&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;40%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;102&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Gold&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;20%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;103&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Bronze&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;규칙&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;만족/불만족&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2정규형을 만족해야 한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;만족&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;기본키를 제외한 속성들 간의 이행 종속성이 없어야 한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;불만족&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;3NF을 적용한 테이블&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;lt;ID테이블 &amp;amp; 등급테이블&amp;gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;ID&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;등급&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;—&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;등급&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;할인율&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;101&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Vip&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;—&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Vip&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;40%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;102&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Gold&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;—&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Gold&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;20%&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;103&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Bronze&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;—&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;Bronze&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;10%&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;규칙&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;만족/불만족&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;2정규형을 만족해야 한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;만족&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;기본키를 제외한 속성들 간의 이행 종속성이 없어야 한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;만족&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;3NF 적용 효과&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;3정규화를 진행하면 이와 같이 2개의 테이블로 분리해서 관리할 수 있습니다.&lt;/li&gt;
    &lt;li&gt;기존 하나의 테이블에 중복해서 들어가야 했던 속성인 할인율은 등급테이블에서 별도로 관리하고 대신 ID테이블에 등급을 외래키(Foreign Key)로 설정해서 부서테이블과 Join해서 사용할 수 있도록 합니다.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;4-bcnf-boyce-codd-normal-form&quot;&gt;4. BCNF (Boyce-Codd Normal Form)&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;BCNF는 제3정규형을 만족한 상태에서 추가로 모든 결정자(Determinant)가 후보키(Candidate Key)가 되도록 하는 것입니다.&lt;/li&gt;
  &lt;li&gt;이를 통해 테이블에서 발생할 수 있는 함수 종속 관계가 후보키에만 의존하도록 만들어 데이터베이스의 무결성과 일관성을 향상시킵니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;규칙&lt;/p&gt;
  &lt;ol&gt;
    &lt;li&gt;3정규형을 만족해야 한다.&lt;/li&gt;
    &lt;li&gt;모든 결정자가 후보키 집합에 속해야 한다.&lt;/li&gt;
  &lt;/ol&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;BCNF적용이 필요한 테이블&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;학생번호&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;과목&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;지도교수&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;101&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;자바&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;김자바&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;101&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C++&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;박플플&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;102&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;자바&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;오자바&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;102&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C#&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;조씨샵&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;103&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;자바&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;김자바&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;규칙&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;만족/불만족&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3정규형을 만족해야 한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;만족&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;모든 결정자가 후보키 집합에 속해야 한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;불만족&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;ul&gt;
  &lt;li&gt;BCNF적용한 테이블&lt;/li&gt;
&lt;/ul&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;학생번호&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;지도교수&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;—&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;지도교수&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;과목&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;101&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;김자바&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;—&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;김자바&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;자바&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;101&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;박플플&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;—&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;박플플&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C++&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;102&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;오자바&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;—&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;오자바&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;자바&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;103&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;조씨샵&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;—&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;조씨샵&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;C#&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;104&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;김자바&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;—&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;규칙&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;만족/불만족&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;3정규형을 만족해야 한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;만족&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;모든 결정자가 후보키 집합에 속해야 한다.&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;strong&gt;만족&lt;/strong&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
  &lt;p&gt;정규화 과정을 통해 데이터베이스의 중복을 줄이고 무결성을 높일 수 있지만 너무 많은 정규화는 데이터베이스의 성능과 복잡도에 영향을 줄 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;이로 인해 여러 테이블 간의 조인 연산이 많아지거나 데이터 처리 시간이 증가할 수 있습니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;따라서, 정규화의 단계를 선택할 때는 데이터베이스의 목적, 사용 패턴, 성능 요구 사항 등을 고려하여 적절한 균형을 찾아야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;이를 위해, 실제 구현 시에는 3NF 또는 BCNF까지 정규화를 수행하고, 필요에 따라 일부 비정규화를 적용하기도 합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;5-반정규화&quot;&gt;5. 반정규화&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;고의적으로 3정규화를 진행하지 않고 데이터베이스를 설계하는 것을 반정규화라고 부르는데, 위의 3정규화 예시에서 살펴본 3정규화가 이루어지지 않은 경우에 해당하는 테이블이 그대로 사용되는 것입니다&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;참고자료&quot;&gt;참고자료&lt;/h3&gt;
&lt;p&gt;
&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://mangkyu.tistory.com/110&quot;&gt;데이터베이스-정규화1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://datalibrary.tistory.com/256&quot;&gt;데이터베이스-정규화2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://sjsage522.github.io/posts/db-normalization-denormalization/&quot;&gt;데이터베이스-정규화3&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://danha23.tistory.com/16&quot;&gt;데이터베이스-정규화4&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>kcw0331</name>
        
        
      </author>

      

      
        <category term="cs" />
      

      
        <summary type="html">CS 스터디 공부 목록 CS - Hyper-parameter</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">cs - Critical Section, Singleton Pattern, Overloading, Overriding</title>
      <link href="http://localhost:4000/tag/cs-2" rel="alternate" type="text/html" title="cs - Critical Section, Singleton Pattern, Overloading, Overriding" />
      <published>2023-04-04T09:40:00+09:00</published>
      <updated>2023-04-04T09:40:00+09:00</updated>
      <id>http://localhost:4000/tag/cs-2</id>
      <content type="html" xml:base="http://localhost:4000/tag/cs-2">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;CS 스터디 공부 목록 &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./cs-1&quot;&gt;CS - Hyper-parameter&lt;/a&gt;&lt;/li&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./coding-thiscoding(20230117)&quot;&gt;Coding - 순차 탐색&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./coding-thiscoding(20230118)&quot;&gt;Coding - 이진 탐색&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./msai-1weeks(2)&quot;&gt;Msai - 1주차(2)&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./msai-1weeks(3)&quot;&gt;Msai - 1주차(3)&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;1-critical-section&quot;&gt;1. Critical Section&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Critical section은 멀티스레드 환경에서 공유 자원에 대한 접근이 제한되어야 하는 코드 영역을 말합니다.(= 한 순간 반드시 프로세스 하나만 집입해야 하는데, 프로그램에서 임계 자원을 이용하는 부분으로 공유 자원의 독점을 보장하는 코드 영역을 의미합니다.)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;여러 스레드가 공유 자원에 동시에 접근하면 충돌이 발생하여 예기치 않은 동작이 발생할 수 있습니다. 따라서 이를 방지하기 위해서는 공유 자원을 보호하는 방법이 필요합니다. 이를 위해서 Critical section이라는 개념이 등장하게 되었습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Critical section은 한 번에 하나의 스레드만 접근할 수 있는 코드영역입니다. 이를 구현하기 위해 락(lock)이라는 동기화 기술을 사용합니다. 락은 공유 자원에 대한 접근 권한을 가진 스레으가 락을 확보하고, 작업이 끝난 후 락을 해제함으로써 다른 스레드가 접근할 수 있도록 합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;락을 사용하여 Critical section을 보호하면, 멀티스레드 환경에서 안전하게 공유 자원에 접근할 수 있습니다. 하지만 락이 잘못 사용될 경우, 데드락(Deadlock)이 발생하거나 성능 저하가 일어날 수 있으므로 주의해야 합니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;임계 구역은 지정된 시간이 지난 후 종료된다.&lt;/strong&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;공유되는 자원 =&amp;gt; 동시에 접근하려고 하는 자원에서 문제가 생기지 않게 보장해주어야 하는 영역이다.(= 임계영역)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;임계 영역을 해결하기 위한 방법&lt;/p&gt;
  &lt;ul&gt;
    &lt;li&gt;크리티컬 섹션 문제에 대한 모든 솔루션은 다음 요구 사항을 충족합니다.
      &lt;ol&gt;
        &lt;li&gt;상호배제: 한 프로세스가 임계 영역에 들어갔을 때, 다른 포르세스는 들어갈 수 없습니다.&lt;/li&gt;
        &lt;li&gt;진행률: 임계 구역에서 실행 중인 프로세스가 없고 임계 구역에 진입하려는 프로세스가 있을 때, 진입하기 위해 무한전 기다릴 필요는 없습니다.&lt;/li&gt;
        &lt;li&gt;제한된 대기: 다른 프로세스가 임계 영역에 들어가도록 요청한 후 해당 요청이 수락되기 전에 프로세스가 임계 영역에서 실행할 수 있는 횟수에 제한이 있어야 합니다.&lt;/li&gt;
      &lt;/ol&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;2-singleton-pattern&quot;&gt;2. Singleton pattern&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;싱글턴 패턴을 따르는 클래스는 생성자가 여러 차례 호출 되더라도 실제로 생성되는 객체는 하나이고 최초 생성 이후에 호출된 생성자는 최초의 생성자가 객체를 리턴한다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;이와 같은 디자인 유형을 “싱글턴 패턴”이라고 한다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;파이썬의 모듈은 그 자체로 싱글턴이다.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# 파이썬
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;singleton&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;__instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__instance&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__instance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__instance&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;3-overriding-and-overloading&quot;&gt;3. Overriding And Overloading&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Overriding과 Overloading은 객체 지향 프로그램(OOP)에서 다형성을 구현하기 위해 사용되는 개념입니다.&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;여기에서 다형성(Polymorphism)은 객체 지향 프로그래밍에서 여러 개의 클래스가 동일한 메서드나 프로퍼티를 가지고 있을 때,
각 클래스의 인스턴스가 해당 메서드나 프로퍼티를 다르게 처리할 수 있는 것을 말합니다. 즉, 동일한 이름의 메서드나 프로퍼티가 다른 방식으로 동작할 수 있는 것입니다.&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;다형성은 상속, 추상화, 인터페이스, 오버라이딩 등의 개념들과 밀접한 관련이 있습니다. 예를 들면, 상위 클래스의 메서드를 하위 클래스에서 오버라이딩하여 다른 방식으로 동작할 수 있습니다.
이렇게 하위 클래스에서 상위 클래스의 메서드를 재정의하면, 다형성을 구현할 수 있습니다. 또한, 추상 클래스나 인터페이스를 사용하면, 다른 클래스에서 해당 추상 클래스나 인터페이스를 상속하거나 
구현하여 다형성을 구현할 수 있습니다.&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;31-overloading&quot;&gt;3.1. Overloading&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;두 메서드가 같은 이름을 갖고 있으나 인자의 수나 자료형이 다른 경우입니다.&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Overloading(오버로딩)은 동일한 이름의 메서드를 매개변수의 개수나 타입 등을 다르게하여 여러 개 정의하는 것을 말합니다.
같은 이름의 메서드나 여러 개 있지만 매개변수의 타입이나 개수가 다르기 때문에 컨파일러는 메서드 호출 시 인자의 타입이나 개수에 맞는 메서드를 자동으로 선택해줍니다.
예를 들면, Print() 메서드는 매개변수의 타입에 따라 여러 버전이 오버로딩됩니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;아래는 자바에서 사용한 Overloading의 예제 코드입니다.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Overloading&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeArea&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Circle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeArea&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Circle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Circle&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeArea&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Square&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;32-overriding&quot;&gt;3.2. Overriding&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;상위 클래스의 메서드와 이름과 signature가 같은 함수를 하위 클래스에 재정의 하는 것 입니다.
    &lt;ul&gt;
      &lt;li&gt;상속 관계에 있는 클래스 간에 같은 이름의 메서드를 정의하는 것 입니다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Overriding(오버라이딩)은 상위 클래스가 가지고 있는 메서드를 하위 클래스에 재정의하여 사용하는 것을 말하니다.
즉, 하위 클래스에서 상위 클래스의 메서드를 덮어쓰는 것입니다. 이를 통해 다형성을 구현할 수 있습니다. 예를 들면,
Animal 클래스에 있는 makeSound() 메서드를 하위 클래스인 Dog 클래스에서 오버 라이딩하여 개 울음소리를 내도록 구현할 수 있습니다.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;아래는 자바에서 사용한 Overriding의 예제 코드입니다.
    &lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;#&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;overriding&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;example&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printMe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Shape&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeArea&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Circle&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 개발자의 실수를 방지하기 위해 @Override(annotation) 쓰는 것을 권장&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;printMe&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Circle&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeArea&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rad&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;3.15&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ambiguous&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Shape&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;computeArea&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;area&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
    &lt;blockquote&gt;
      &lt;ul&gt;
        &lt;li&gt;Overrindg과 Overloading은 이름은 유하사지만, 서로 다른 개념이고 용도 또한 다릅니다.&lt;/li&gt;
        &lt;li&gt;Overloading은 같은 이름의 메서드를 다양한 매개변수로 정의하는 것이고,&lt;/li&gt;
        &lt;li&gt;Overriding은 상속 관계에서 부모 클래스의 메서드를 자식 클래스에서 재정의하여 사용하는 것입니다.&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/blockquote&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;참고문헌&quot;&gt;참고문헌&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://velog.io/@lovi0714/%EC%9E%84%EA%B3%84-%EC%98%81%EC%97%AD-Critical-Section&quot;&gt;임계영역_참고문헌1&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.educative.io/answers/what-is-the-critical-section-problem-in-operating-systems&quot;&gt;임계영역_참고문헌2&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Singleton_pattern&quot;&gt;Sigleton Pattern&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://gmlwjd9405.github.io/2018/08/09/java-overloading-vs-overriding.html&quot;&gt;overring and overloading&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>

      
      
      
      
      

      <author>
          <name>kcw0331</name>
        
        
      </author>

      

      
        <category term="cs" />
      

      
        <summary type="html">CS 스터디 공부 목록 CS - Hyper-parameter</summary>
      

      
      
    </entry>
  
    <entry>
      <title type="html">cs - Hyper-parameter</title>
      <link href="http://localhost:4000/tag/cs-1" rel="alternate" type="text/html" title="cs - Hyper-parameter" />
      <published>2023-03-28T09:40:00+09:00</published>
      <updated>2023-03-28T09:40:00+09:00</updated>
      <id>http://localhost:4000/tag/cs-1</id>
      <content type="html" xml:base="http://localhost:4000/tag/cs-1">&lt;p&gt;&lt;span class=&quot;table-of-contents-list&quot;&gt;CS 스터디 공부 목록 &lt;/span&gt;&lt;/p&gt;
&lt;ul class=&quot;table-of-contents-list&quot;&gt;
    &lt;li&gt;&lt;a href=&quot;./cs-1&quot;&gt;CS - Hyper-parameter&lt;/a&gt;&lt;/li&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./coding-thiscoding(20230117)&quot;&gt;Coding - 순차 탐색&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./coding-thiscoding(20230118)&quot;&gt;Coding - 이진 탐색&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./msai-1weeks(2)&quot;&gt;Msai - 1주차(2)&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;!--    &lt;li&gt;&lt;a href=&quot;./msai-1weeks(3)&quot;&gt;Msai - 1주차(3)&lt;/a&gt;&lt;/li&gt;--&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;1-how-control-hyper-parameter-in-ai&quot;&gt;1. How control hyper-parameter in AI&lt;/h2&gt;
&lt;p&gt;Hyperparameters are parameters in machine learning models that are set before training and affect the learning process and the final model’s performance. Examples of hyperparameters include the learning rate, the number of hidden layers in a neural network, and the number of trees in a random forest model.&lt;/p&gt;

&lt;p&gt;Controlling hyperparameters in AI involves finding the optimal values for these hyperparameters that result in the best performance of the model. There are several techniques for hyperparameter tuning, including:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Grid Search: This technique involves manually defining a grid of hyperparameter values and testing each combination of hyperparameters to find the best performing model.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Random Search: This technique involves randomly sampling hyperparameter values within predefined ranges and testing each combination of hyperparameters to find the best performing model.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Bayesian Optimization: This technique uses a probabilistic model to predict the performance of different hyperparameter values and selects the next hyperparameter values to test based on the predictions.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Genetic Algorithms: This technique uses an evolutionary approach to find the best combination of hyperparameters, where the fittest combinations are selected for further mutation and breeding.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Automated Machine Learning (AutoML): This is an automated approach to hyperparameter tuning that uses algorithms to search for the optimal combination of hyperparameters.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Overall, controlling hyperparameters in AI involves a combination of domain knowledge, trial and error, and algorithmic optimization techniques to find the best hyperparameters for the specific machine learning problem at hand.&lt;/p&gt;</content>

      
      
      
      
      

      <author>
          <name>kcw0331</name>
        
        
      </author>

      

      
        <category term="cs" />
      

      
        <summary type="html">CS 스터디 공부 목록 CS - Hyper-parameter</summary>
      

      
      
    </entry>
  
</feed>
